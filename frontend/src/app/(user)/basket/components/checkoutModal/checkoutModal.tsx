// basket/components/checkoutModal/checkoutModal.tsx
'use client'

import { useState } from 'react';
import { Input, Radio, Button, Modal } from 'antd';
import { useBasketStore } from "@/app/lib/api/store/useBasketStore";
import { useRouter } from "next/navigation";
import './checkoutModal.scss';
import { request } from '@/app/lib/api/store/hooks/request';
import { ORDERS } from '@/app/lib/api/constants/api';
import { OrderApiResponse } from '@/app/lib/types/orderTypes';

interface AddressForm {
  street: string;
  flat: string;
  floor: string;
  doorphone: string;
}

interface CheckoutModalProps {
  isOpen: boolean;
  onClose: () => void;
}

export const CheckoutModal = ({ isOpen, onClose }: CheckoutModalProps) => {
  const [address, setAddress] = useState<AddressForm>({
    street: '',
    flat: '',
    floor: '',
    doorphone: ''
  });
  const [paymentMethod, setPaymentMethod] = useState<string>('card');
  const [isLoading, setIsLoading] = useState(false);
  
  const { items, getTotalPrice, clearItems } = useBasketStore();
  const router = useRouter();

  const totalPrice = getTotalPrice();

 const handleSubmit = async (e: React.FormEvent) => {
  e.preventDefault();
  
  // –í–∞–ª–∏–¥–∞—Ü–∏—è
  if (!address.street.trim() || !address.flat.trim()) {
    alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è (—É–ª–∏—Ü–∞ –∏ –∫–≤–∞—Ä—Ç–∏—Ä–∞)');
    return;
  }

  setIsLoading(true);

  try {
    // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    const orderData = {
      address: {
        street: address.street.trim(),
        flat: address.flat.trim(),
        floor: address.floor.trim() || "",
        doorphone: address.doorphone ? parseInt(address.doorphone) : undefined
      },
      paymentMethod: paymentMethod,
      phone: "" // –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Å—Ç–æ–µ –ø–æ–ª–µ phone
    };

    console.log('üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º—ã–µ –¥–∞–Ω–Ω—ã–µ:', orderData);

    const orderResponse = await request<OrderApiResponse>(ORDERS, "POST", orderData);

    console.log('üì• –ü–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', orderResponse);

    // üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –æ—à–∏–±–æ–∫
    if (orderResponse.error) {
      throw new Error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞: ' + orderResponse.error);
    }

    // üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
    const orderDataFromResponse = orderResponse.data?.data || orderResponse.data || orderResponse;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–∫–∞–∑ —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ (–¥–∞–∂–µ –µ—Å–ª–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –Ω–µ –∏–¥–µ–∞–ª—å–Ω–∞)
    if (!orderDataFromResponse) {
      console.warn('–ù–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞, –Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º...');
    }

    // –õ–æ–≥–∏—Ä—É–µ–º –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    console.log('üìã –î–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞ –∏–∑ –æ—Ç–≤–µ—Ç–∞:', orderDataFromResponse);
    
    // üîß –£–ë–ò–†–ê–ï–ú –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã–∑—ã–≤–∞—é—Ç –æ—à–∏–±–∫—É
    // console.log('üè† Address –≤ –æ—Ç–≤–µ—Ç–µ:', orderResponse.data?.data.address);
    // console.log('üí≥ Payment method –≤ –æ—Ç–≤–µ—Ç–µ:', orderResponse.data?.data.paymentMethod);

    // 3. –û—á–∏—â–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —É—Å–ø–µ—Ö
    clearItems();
    onClose();
    alert('–ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!');
    
    // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –≥–ª–∞–≤–Ω—É—é
    router.push('/');
    
  } catch (error) {
    console.error('Error during checkout:', error);
    alert('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
  } finally {
    setIsLoading(false);
  }
};


  const handleInputChange = (field: keyof AddressForm, value: string) => {
    setAddress(prev => ({
      ...prev,
      [field]: value
    }));
  };

  return (
    <Modal
      title="–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞"
      open={isOpen}
      onCancel={onClose}
      footer={null}
      width={600}
      className="checkout-modal"
    >
      <div className="checkout-content">
        {/* –°–≤–æ–¥–∫–∞ –∑–∞–∫–∞–∑–∞ */}
        <div className="order-summary-section">
          <h3>–í–∞—à –∑–∞–∫–∞–∑</h3>
          <div className="order-items-preview">
            {items.map(({ product, options }, index) => (
              <div key={index} className="order-item-preview">
                <span className="item-name">{product.name}</span>
                <span className="item-quantity">√ó{options.quantity}</span>
                <span className="item-price">{options.totalPrice || product.price} ‚ÇΩ</span>
              </div>
            ))}
          </div>
          <div className="order-total-preview">
            <strong>–ò—Ç–æ–≥–æ: {totalPrice} ‚ÇΩ</strong>
          </div>
        </div>

        {/* –§–æ—Ä–º–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è */}
        <form onSubmit={handleSubmit} className="checkout-form">
          <div className="form-section">
            <h3>–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏</h3>
            
            <div className="form-group">
              <label>–£–ª–∏—Ü–∞ –∏ –¥–æ–º *</label>
              <Input
                placeholder="—É–ª. –ß–µ—Ä–Ω–æ–º–æ—Ä—Å–∫–∏–π 77–∞"
                value={address.street}
                onChange={(e) => handleInputChange('street', e.target.value)}
                required
              />
            </div>

            <div className="form-row">
              <div className="form-group">
                <label>–ö–≤–∞—Ä—Ç–∏—Ä–∞ *</label>
                <Input
                  placeholder="12"
                  value={address.flat}
                  onChange={(e) => handleInputChange('flat', e.target.value)}
                  required
                />
              </div>

              <div className="form-group">
                <label>–≠—Ç–∞–∂</label>
                <Input
                  placeholder="4"
                  value={address.floor}
                  onChange={(e) => handleInputChange('floor', e.target.value)}
                />
              </div>

              <div className="form-group">
                <label>–î–æ–º–æ—Ñ–æ–Ω</label>
                <Input
                  placeholder="123"
                  value={address.doorphone}
                  onChange={(e) => handleInputChange('doorphone', e.target.value)}
                />
              </div>
            </div>
          </div>

          <div className="form-section">
            <h3>–°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã</h3>
            <Radio.Group 
              value={paymentMethod} 
              onChange={(e) => setPaymentMethod(e.target.value)}
              className="payment-methods"
            >
              <Radio value="card">–ö–∞—Ä—Ç–æ–π –æ–Ω–ª–∞–π–Ω</Radio>
              <Radio value="cash">–ù–∞–ª–∏—á–Ω—ã–º–∏ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏</Radio>
            </Radio.Group>
          </div>

          <div className="form-actions">
            <Button onClick={onClose} disabled={isLoading}>
              –û—Ç–º–µ–Ω–∞
            </Button>
            <Button 
              type="primary" 
              htmlType="submit"
              loading={isLoading}
              disabled={!address.street.trim() || !address.flat.trim()}
            >
              –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–∫–∞–∑
            </Button>
          </div>
        </form>
      </div>
    </Modal>
  );
};