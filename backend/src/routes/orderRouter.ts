import express, { Response } from 'express'
const router = express.Router({ mergeParams: true });
import {Basket} from "../models/Basket"
import {User} from "../models/User"
import {Order} from "../models/Order"
import {sendOrderNotification} from '../telegram/notificationBot'
import { editOrder } from"../controllers/order"
import { AuthRequest } from '../types/authAdminRequest';
import userAuthenticated from '../middlewares/userAuthenticated';

// –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∑–∞–∫–∞–∑–æ–≤
router.get("/",userAuthenticated, async (req:AuthRequest, res: Response) => {
  try {
    const orders = await Order.find({ userId: req.user.id });
    res.json(orders);
  } catch (e) {
    res.status(500).json({ error: e.message });
  }
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–¥–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞
router.get("/:id",userAuthenticated, async (req:AuthRequest, res: Response) => {
  try {
    const order = await Order.findOne({
      _id: req.params.id,
      userId: req.user.id,
    });
    if (!order) {
      return res.status(404).json({ error: "–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω" });
    }
    res.json(order);
  } catch (e) {
    return res.status(400).json({ error: "–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω" });
  }
});

//—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞
router.patch("/:id", userAuthenticated,async (req:AuthRequest, res: Response) => {
  try {
    const { error } = await editOrder(req.params.id, req.body);

    if (error) {
      return res.status(400).json({ error });
    }

    res.status(200).json("–°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω");
  } catch (e) {
    res.status(500).json({ error: e.message });
  }
});

// –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞
router.post("/",userAuthenticated, async (req:AuthRequest, res: Response) => {
  try {
    const userId = req.user.id;
    const { address, paymentMethod, phone } = req.body;

    console.log('üì® Received order data:', req.body); // –î–æ–±–∞–≤—å—Ç–µ —ç—Ç–æ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏

    // –ü–æ–ª—É—á–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É —Å populate
    const basket = await Basket.findOne({ userId }).populate({
      path: "items.productId",
      model: "Product",
    });

    if (!basket?.items?.length) {
      return res.status(400).json("–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞");
    }

    // –§–æ—Ä–º–∏—Ä—É–µ–º items –¥–ª—è –∑–∞–∫–∞–∑–∞
    const orderItems = basket.items.map((item) => {
      const product:any = item.productId;

      // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–æ–ø–æ–≤
      const addons = item.selectedAddons.map((addon:any) => {
        const productAddon = product.addons.find((a) => a._id.equals(addon.addonId));
        return {
          addonId: productAddon._id,
          name: productAddon.name,
          price: productAddon.price,
          quantity: addon.quantity,
        };
      });

      // –ü–æ–ª—É—á–∞–µ–º —É–±—Ä–∞–Ω–Ω—ã–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã
      const removedIngredients = item.removedIngredientIds.map((id) => {
        const ing = product.removableIngredients.find((ri) => ri._id.equals(id));
        return {
          _id: ing._id,
          name: ing.name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç',
        };
      });

      return {
        productId: product._id,
        name: product.name,
        price: product.price,
        quantity: item.quantity,
        selectedAddons: addons,
        removedIngredients: removedIngredients,
        comment: item.comment || "",
      };
    });

    // –†–∞—Å—á–µ—Ç –æ–±—â–µ–π —Å—É–º–º—ã
    const totalPrice = orderItems.reduce((sum, item) => {
      const base = item.price * item.quantity;
      const addonsSum = item.selectedAddons.reduce(
        (s, a) => s + a.price * a.quantity,
        0
      );
      return sum + base + addonsSum;
    }, 0);

    // –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑ - —É–±–∏—Ä–∞–µ–º phone –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    const orderData: any = {
      userId,
      items: orderItems,
      address: address || {}, // –ó–∞—â–∏—Ç–∞ –æ—Ç undefined
      paymentMethod: paymentMethod || "card", // –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
      totalPrice,
      status: "pending",
    };

    // –î–æ–±–∞–≤–ª—è–µ–º phone —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
    if (phone) {
      orderData.phone = phone;
    }

    const order = await Order.create(orderData);

    console.log('‚úÖ Created order:', order); // –î–æ–±–∞–≤—å—Ç–µ —ç—Ç–æ

    await sendOrderNotification(order);

    await User.findByIdAndUpdate(userId, { $push: { orders: order._id } });

    // –û—á–∏—â–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É
    await Basket.deleteOne({ userId });

    res.status(201).json(order);
  } catch (e) {
    console.error('‚ùå Error creating order:', e);
    res.status(500).json({ error: e.message });
  }
});

export default router;
